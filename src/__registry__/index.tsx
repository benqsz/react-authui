/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from "react";

export const Index: Record<string, any> ={
  "form-root-error": {
    name: "form-root-error",
    title: "Form Root Error",
    description: "Show errors from root with use-form-hook",
    type: "registry:ui",
    dependencies: ["react-hook-form"],
    files: [{
      path: "src/registry/auth/ui/form-root-error.tsx",
      content: `import { ComponentProps } from 'react';\nimport { useFormState } from 'react-hook-form';\nimport { cn } from '@/lib/utils';\n\ntype Props = ComponentProps<'p'>;\n\nfunction FormRootError({ className, ...props }: Props) {\n  const { errors } = useFormState();\n  const rootError = errors.root;\n  if (!rootError) return null;\n\n  return (\n    <p className={cn('text-destructive text-sm', className)} {...props}>\n      {rootError.message}\n    </p>\n  );\n}\n\nexport { FormRootError };\n`,
      type: "registry:ui",
    }],
  },
  "password-input": {
    name: "password-input",
    title: "Password Input",
    description: "Input with visibility toggle",
    type: "registry:ui",
    dependencies: ["lucide-react"],
    files: [{
      path: "src/registry/auth/ui/password-input.tsx",
      content: `'use client';\nimport { EyeIcon, EyeOffIcon } from 'lucide-react';\nimport { ComponentProps, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\ntype Props = Omit<ComponentProps<typeof Input>, 'type'>;\n\nfunction PasswordInput(props: Props) {\n  const [isVisible, setIsVisible] = useState(false);\n  const toggleVisibility = () => setIsVisible(!isVisible);\n\n  return (\n    <div className='relative'>\n      <Input type={isVisible ? 'text' : 'password'} {...props} />\n      <Button\n        variant='ghost'\n        size='icon'\n        className='absolute top-1/2 right-1 size-7 -translate-y-1/2'\n        onClick={toggleVisibility}\n        type='button'\n        aria-label={\`\${isVisible ? 'Hide' : 'Show'} password\`}\n      >\n        {isVisible ? <EyeOffIcon /> : <EyeIcon />}\n      </Button>\n    </div>\n  );\n}\n\nexport { PasswordInput };\n`,
      type: "registry:ui",
    }],
  },
  "auth-container": {
    name: "auth-container",
    title: "Auth container",
    description: "Card container for all auth components",
    type: "registry:component",
    
    files: [{
      path: "src/registry/auth/components/auth-container.tsx",
      content: `import { ComponentProps, ReactNode } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { cn } from '@/lib/utils';\n\ntype Props = {\n  title: string;\n  description?: string;\n  footer?: ReactNode;\n  children: ReactNode;\n} & ComponentProps<'section'>;\n\nfunction AuthContainer(props: Props) {\n  const { children, className, description, footer, title, ...rest } = props;\n\n  return (\n    <section\n      className={cn(\n        'mx-auto flex size-full max-w-lg items-center justify-center p-4',\n        className,\n      )}\n      {...rest}\n    >\n      <Card className='w-full'>\n        <CardHeader>\n          <CardTitle>\n            <h1>{title}</h1>\n          </CardTitle>\n          {description && (\n            <CardDescription>\n              <p>{description}</p>\n            </CardDescription>\n          )}\n        </CardHeader>\n        <CardContent>{children}</CardContent>\n        {footer && (\n          <CardFooter className='text-muted-foreground justify-center text-center text-sm'>\n            <p>{footer}</p>\n          </CardFooter>\n        )}\n      </Card>\n    </section>\n  );\n}\n\nexport { AuthContainer };\n`,
      type: "registry:component",
    }],
  },
  "form-wrapper": {
    name: "form-wrapper",
    title: "Form Wrapper",
    description: "Wrapper for forms in react auth ui",
    type: "registry:component",
    dependencies: ["zod", "react-hook-form", "@hookform/resolvers", "lucide-react"],
    files: [{
      path: "src/registry/auth/components/form-wrapper.tsx",
      content: `/* eslint-disable @typescript-eslint/no-explicit-any */\n'use client';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Loader2 } from 'lucide-react';\nimport { ReactNode } from 'react';\nimport { DefaultValues, Resolver, useForm } from 'react-hook-form';\nimport { output, z, ZodObject } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Form } from '@/components/ui/form';\nimport { FormRootError } from '@/components/ui/form-root-error';\n\ntype SubmitAction<T> = (values: T) => Promise<{\n  success: boolean;\n  message?: string;\n}>;\n\ntype Props<T extends ZodObject<any>> = {\n  schema: T;\n  submitAction: SubmitAction<z.infer<T>>;\n  successAction: () => void;\n  submitText: string;\n  children: (form: ReturnType<typeof useForm<z.infer<T>>>) => ReactNode;\n};\n\nfunction generateDefaultValues<T extends ZodObject<any>>(\n  schema: T,\n): DefaultValues<z.infer<T>> {\n  const defaults: any = {};\n\n  const shape = schema.shape;\n  for (const key in shape) {\n    const fieldType: string = shape[key].def.type;\n\n    switch (fieldType) {\n      case 'string':\n        defaults[key] = '';\n        break;\n      case 'number':\n        defaults[key] = 0;\n        break;\n      case 'boolean':\n        defaults[key] = false;\n        break;\n      case 'array':\n        defaults[key] = [];\n        break;\n      default:\n        defaults[key] = '';\n    }\n  }\n\n  return defaults;\n}\n\nfunction FormWrapper<T extends ZodObject<any>>(props: Props<T>) {\n  const { children, schema, submitAction, submitText, successAction } = props;\n\n  const form = useForm<z.infer<T>>({\n    defaultValues: generateDefaultValues(schema),\n    resolver: zodResolver(schema) as Resolver<output<T>, any, output<T>>,\n  });\n\n  async function onSubmit(values: z.infer<typeof schema>) {\n    const { success, message } = await submitAction(values);\n    if (!success) {\n      form.setError('root', {\n        message: message || 'Something went wrong',\n        type: 'manual',\n      });\n    }\n    successAction();\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        {children(form)}\n        <FormRootError />\n        <Button disabled={form.formState.isSubmitting} className='w-full'>\n          {form.formState.isSubmitting ? (\n            <Loader2 className='animate-spin' />\n          ) : (\n            submitText\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n\nexport { FormWrapper };\n`,
      type: "registry:component",
    }],
  },
  "user-dropdown": {
    name: "user-dropdown",
    title: "User Dropdown",
    description: "User avatar with dropdown menu for account and logout",
    type: "registry:component",
    dependencies: ["lucide-react"],
    files: [{
      path: "src/registry/auth/components/user-dropdown.tsx",
      content: `'use client';\nimport { User } from 'lucide-react';\nimport Link from 'next/link';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\ntype LoggedInProps = {\n  isLogged: true;\n  username: string;\n  accountHref: string;\n  logOutAction: () => Promise<void>;\n};\n\ntype LoggedOutProps = {\n  isLogged: false;\n  loginHref: string;\n};\n\ntype Props = LoggedInProps | LoggedOutProps;\n\nfunction UserDropdown(props: Props) {\n  const { isLogged } = props;\n\n  if (!isLogged) {\n    const { loginHref } = props;\n    return (\n      <Button variant='outline' size='icon' className='rounded-full' asChild>\n        <Link href={loginHref}>\n          <User />\n        </Link>\n      </Button>\n    );\n  }\n\n  const { accountHref, logOutAction, username } = props;\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Avatar>\n          <AvatarImage src='https://github.com/benqsz.png' alt='@benqsz' />\n          <AvatarFallback>{username.slice(0, 2).toUpperCase()}</AvatarFallback>\n        </Avatar>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent>\n        <DropdownMenuItem asChild>\n          <Link href={accountHref}>My Account</Link>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={logOutAction}>Log out</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nexport { UserDropdown };\n`,
      type: "registry:component",
    }],
  },
  "password-input-demo": {
    name: "password-input-demo",
    title: "",
    description: "",
    type: "registry:example",
    
    files: [{
      path: "src/registry/auth/examples/password-input-demo.tsx",
      content: `import { PasswordInput } from '@/components/ui/password-input';\n\nexport default function PasswordInputDemo() {\n  return <PasswordInput />;\n}\n`,
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/auth/examples/password-input-demo.tsx")),
    source: `import { PasswordInput } from '@/components/ui/password-input';\n\nexport default function PasswordInputDemo() {\n  return <PasswordInput />;\n}\n`,
  },
  "auth-container-demo": {
    name: "auth-container-demo",
    title: "",
    description: "",
    type: "registry:example",
    
    files: [{
      path: "src/registry/auth/examples/auth-container-demo.tsx",
      content: `import { AuthContainer } from '@/components/auth/auth-container';\n\nexport default function AuthContainerDemo() {\n  return (\n    <AuthContainer\n      title='Welcome to Acme'\n      description='This is very important component'\n      footer={\n        <>\n          Already have an account?{' '}\n          <a href='#' className='underline'>\n            Sign in\n          </a>\n        </>\n      }\n    >\n      auth component\n    </AuthContainer>\n  );\n}\n`,
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/auth/examples/auth-container-demo.tsx")),
    source: `import { AuthContainer } from '@/components/auth/auth-container';\n\nexport default function AuthContainerDemo() {\n  return (\n    <AuthContainer\n      title='Welcome to Acme'\n      description='This is very important component'\n      footer={\n        <>\n          Already have an account?{' '}\n          <a href='#' className='underline'>\n            Sign in\n          </a>\n        </>\n      }\n    >\n      auth component\n    </AuthContainer>\n  );\n}\n`,
  },
  "user-dropdown-demo": {
    name: "user-dropdown-demo",
    title: "",
    description: "",
    type: "registry:example",
    
    files: [{
      path: "src/registry/auth/examples/user-dropdown-demo.tsx",
      content: `import { toast } from 'sonner';\nimport { UserDropdown } from '@/components/auth/user-dropdown';\n\nexport default function UserDropdownDemo() {\n  return (\n    <div className='space-y-4'>\n      <div className='flex items-center justify-center gap-4'>\n        Logged in\n        <UserDropdown\n          isLogged\n          username='benqsz'\n          logOutAction={async () => {\n            await new Promise(resolve =>\n              setTimeout(() => resolve(true), 3 * 1000),\n            );\n            toast.success('Sucessfully logged out');\n          }}\n          accountHref='#'\n        />\n      </div>\n      <div className='flex items-center justify-center gap-4'>\n        Not logged in\n        <UserDropdown isLogged={false} loginHref='#' />\n      </div>\n    </div>\n  );\n}\n`,
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/auth/examples/user-dropdown-demo.tsx")),
    source: `import { toast } from 'sonner';\nimport { UserDropdown } from '@/components/auth/user-dropdown';\n\nexport default function UserDropdownDemo() {\n  return (\n    <div className='space-y-4'>\n      <div className='flex items-center justify-center gap-4'>\n        Logged in\n        <UserDropdown\n          isLogged\n          username='benqsz'\n          logOutAction={async () => {\n            await new Promise(resolve =>\n              setTimeout(() => resolve(true), 3 * 1000),\n            );\n            toast.success('Sucessfully logged out');\n          }}\n          accountHref='#'\n        />\n      </div>\n      <div className='flex items-center justify-center gap-4'>\n        Not logged in\n        <UserDropdown isLogged={false} loginHref='#' />\n      </div>\n    </div>\n  );\n}\n`,
  },
}