{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-wrapper",
  "type": "registry:component",
  "title": "Form Wrapper",
  "description": "Wrapper for forms in react auth ui",
  "dependencies": [
    "zod",
    "react-hook-form",
    "@hookform/resolvers",
    "lucide-react"
  ],
  "registryDependencies": [
    "form",
    "button",
    "https://react-authui.vercel.app/r/form-root-error.json"
  ],
  "files": [
    {
      "path": "src/registry/auth/components/form-wrapper.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n'use client';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Loader2 } from 'lucide-react';\nimport { ReactNode } from 'react';\nimport { DefaultValues, Resolver, useForm } from 'react-hook-form';\nimport { output, z, ZodObject } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Form } from '@/components/ui/form';\nimport { FormRootError } from '@/registry/auth/ui/form-root-error';\n\ntype Props<T extends ZodObject<any>> = {\n  schema: T;\n  submitAction: (values: z.infer<T>) => Promise<true | string>;\n  successAction: () => void;\n  submitText: string;\n  children: (form: ReturnType<typeof useForm<z.infer<T>>>) => ReactNode;\n};\n\nfunction generateDefaultValues<T extends ZodObject<any>>(\n  schema: T,\n): DefaultValues<z.infer<T>> {\n  const defaults: any = {};\n\n  const shape = schema.shape;\n  for (const key in shape) {\n    const fieldType: string = shape[key].def.type;\n\n    switch (fieldType) {\n      case 'string':\n        defaults[key] = '';\n        break;\n      case 'number':\n        defaults[key] = 0;\n        break;\n      case 'boolean':\n        defaults[key] = false;\n        break;\n      case 'array':\n        defaults[key] = [];\n        break;\n      default:\n        defaults[key] = '';\n    }\n  }\n\n  return defaults;\n}\n\nfunction FormWrapper<T extends ZodObject<any>>(props: Props<T>) {\n  const { children, schema, submitAction, submitText, successAction } = props;\n\n  const form = useForm<z.infer<T>>({\n    defaultValues: generateDefaultValues(schema),\n    resolver: zodResolver(schema) as Resolver<output<T>, any, output<T>>,\n  });\n\n  async function onSubmit(values: z.infer<typeof schema>) {\n    const response = await submitAction(values);\n    if (response === typeof 'string') {\n      form.setError('root', {\n        message: response,\n        type: 'manual',\n      });\n    }\n    successAction();\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        {children(form)}\n        <FormRootError />\n        <Button disabled={form.formState.isSubmitting} className=\"w-full\">\n          {form.formState.isSubmitting ? (\n            <Loader2 className=\"animate-spin\" />\n          ) : (\n            submitText\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n\nexport { FormWrapper };\n",
      "type": "registry:component",
      "target": "components/auth/form-wrapper.tsx"
    }
  ]
}